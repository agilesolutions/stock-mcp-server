import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    // which produces test fixtures
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.4'
}

apply plugin: 'maven-publish'

group = 'com.agilesolutions.mcp'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

}

ext {
    commit = commit()
    branchName = branchName()
    set('springAiVersion', "1.0.0-M6")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    // Bill of Materials
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-M7")
    implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.8.1")

    implementation 'org.springframework.ai:spring-ai-mcp-server-webmvc-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.ai:spring-ai-spring-boot-testcontainers'
    testImplementation "org.testcontainers:chromadb:1.20.0"
    testImplementation 'org.testcontainers:ollama:1.20.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.agilesolutions.mcp'
            artifactId = 'stock-mcp-server'
            version = '1.0.0'

            from components.java
        }
    }
}

test {
    useJUnitPlatform()
}

String commit() {
    return 'git rev-parse HEAD'.execute().text.trim()
}

String branchName() {
    return hasProperty('branch.name') ? property('branch.name') : 'git branch --show-current'.execute().text.trim()
}

task copyAppInsightsAgent(type: Copy) {
    from "${rootDir}/libs/applicationinsights-agent.jar"
    into "${buildDir}/libs"
}

task generateHelmChart(type: Copy) {
    inputs.dir('helm/demo')
    inputs.file('build.gradle')
    from('helm') {
        include 'demo/**'
        filter(ReplaceTokens, tokens: [appVersion: version])
    }
    into('build')

}

bootJar {

    archiveFileName = './application.jar'

    manifest{
        attributes(
                'Built-by'          : System.properties['user.name'],
                'Build-Timestamp'   : java.time.Instant.now(),
                'Build-Revision'    : commit,
                'Build-Branch'      : branchName,
                'Created-by'        : "Gradle ${gradle.gradleVersion}",
                'Build-JDK'         : "${System.properties['java.version']} ${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
                'Build-OS'          : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )

    }

    dependsOn copyAppInsightsAgent

}

task dockerBuild(type: Exec) {
    commandLine 'docker', 'build', '-t', "agilesolutions/mcpstock:${version}", '.'
}

task dockerPush(type: Exec) {
    commandLine 'docker', 'push', "agilesolutions/mcpstock:${version}"
}


task release(type: GradleBuild) {
    tasks = ['clean', 'build', 'dockerBuild', 'generateHelmChart', 'helmDeploy']
}
test.dependsOn generateHelmChart
compileTestJava.dependsOn generateHelmChart
generateHelmChart.dependsOn bootJar, jar